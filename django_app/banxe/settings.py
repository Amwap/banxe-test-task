"""
Django settings for banxe project.
Generated by 'django-admin startproject' using Django 4.0.1.
For more information on this file, see
https://docs.djangoproject.com/en/4.0/topics/settings/
For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.0/ref/settings/
"""

from pathlib import Path
import os
from datetime import timedelta

BASE_DIR = Path(__file__).resolve().parent.parent
 

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.environ.get("DJANGO_SECRET_KEY")
DEBUG = bool(os.environ.get("DJANGO_DEBUG", True))
ALLOWED_HOSTS = os.environ.get("DJANGO_ALLOWED_HOSTS").split()

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'corsheaders',
    'bootstrap4',
    
    'apps.auth_app',
    'apps.users_app',
    'apps.wallet_app'
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]



ROOT_URLCONF = 'banxe.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates'), 'templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'banxe.wsgi.application'

# Database
# https://docs.djangoproject.com/en/4.0/ref/settings/#databases

DATABASES = {
    'default': {
        "ENGINE": os.environ.get("SQL_ENGINE"),
        "NAME": os.environ.get("SQL_DATABASE"),
        "USER": os.environ.get("SQL_USER"),
        "PASSWORD": os.environ.get("SQL_PASSWORD"),
        "HOST": os.environ.get("SQL_HOST"),
        "PORT": os.environ.get("SQL_PORT")
    }
}


# Password validation
# https://docs.djangoproject.com/en/4.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.0/topics/i18n/

LANGUAGE_CODE = 'en-us'
TIME_ZONE = 'UTC'

# LANGUAGE_CODE = 'ru-ru'
# TIME_ZONE = 'Europe/Moscow'

USE_I18N = True
USE_TZ = True

AUTH_USER_MODEL = 'users_app.User'
AUTHENTICATION_BACKENDS = [
        'apps.auth_app.backends.AuthBackend',
    ]

LOGIN_REDIRECT_URL = '/home/'
LOGIN_URL = '/login/'
# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.0/howto/static-files/

STATIC_URL = '/static/'
STATIC_ROOT = BASE_DIR / "staticfiles"

STATICFILES_DIRS = [
    os.path.join(BASE_DIR, 'static'),
]

MEDIA_URL = "/media/"
MEDIA_ROOT = BASE_DIR / "mediafiles"

# Default primary key field type
# https://docs.djangoproject.com/en/4.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

if os.environ.get('EMAIL_HOST_USER'):
    EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
    EMAIL_HOST = 'mail.banxe.com'
    EMAIL_USE_TLS = True
    EMAIL_PORT = 2525
    EMAIL_HOST_USER = os.environ.get('EMAIL_HOST_USER')
    EMAIL_HOST_PASSWORD = os.environ.get('EMAIL_HOST_PASSWORD')


if os.environ.get('DJANGO_LOGGING'):
    LOGS_DIR = os.path.join(BASE_DIR, 'logs')
    if not os.path.exists(LOGS_DIR):
        os.mkdir(LOGS_DIR)

    DEBUG_FILE = os.path.join(LOGS_DIR, 'debug.log')
    ERROR_FILE = os.path.join(LOGS_DIR, 'error.log')
    PAYMENT_FILE = os.path.join(LOGS_DIR, 'payment.log')

    LOGGING = {
        'version': 1,
        'disable_existing_loggers': False,
        'formatters': {
            'verbose': {
                'format': '{levelname} {asctime} {module} {message}',
                'style': '{',
            },
            'default': {
                'format': '%(levelname)-8s %(asctime)-25s %(message)s',
            },
            'console': {
                'format': '%(levelname)-8s %(message)s',
            }
        },
        'handlers': {
            'file-debug': {
                'level': 'DEBUG',
                'class': 'logging.FileHandler',
                'filename': DEBUG_FILE,
                'formatter': 'verbose',
            },
            'file-warn': {
                'level': 'WARNING',
                'class': 'logging.FileHandler',
                'filename': ERROR_FILE,
                'formatter': 'verbose',
            },
            'payment-info': {
                'level': 'DEBUG',
                'class': 'logging.FileHandler',
                'filename': PAYMENT_FILE,
                'formatter': 'verbose',
            },
            'console': {
                'level': 'DEBUG',
                'class': 'logging.StreamHandler',
                'formatter': 'verbose',
            },
        },
        'loggers': {
            'django': {
                'handlers': ['file-debug', 'file-warn', 'console'],
                'level': 'WARNING',
                'propagate': True,
            },
            'payment': {
                'handlers': ['payment-info'],
                'level': 'DEBUG',
                'propagate': True,
            },
        },
    }
